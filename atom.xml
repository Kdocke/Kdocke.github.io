<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kdocke</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-17T15:56:03.025Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kdocke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark 学习笔记之 RDD</title>
    <link href="http://yoursite.com/2020/07/17/Spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BRDD/"/>
    <id>http://yoursite.com/2020/07/17/Spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BRDD/</id>
    <published>2020-07-17T15:45:37.000Z</published>
    <updated>2020-07-17T15:56:03.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark-RDD"><a href="#Spark-RDD" class="headerlink" title="Spark RDD"></a>Spark RDD</h1><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><p>RDD 是一个基本的抽象，操作RDD就像操作一个本地集合一样，降低了编程的复杂度。</p><p>RDD 里面记录的是描述信息（从哪里读数据、以后对数据如何计算）、RDD 的方法分为两类 Transformation、Action（生成 Task，并发送到 Excutor 中执行）</p><p>RDD的特点：</p><ul><li>1、一系列分区</li><li>2、每一个输入切片会有一个函数作用在上面</li><li>3、RDD 和 RDD 之间存在依赖关系（子 RDD 是 父 RDD 调用什么方法，传入哪些函数得到的）</li><li>4、（可选）RDD 中如果存储的是 KV，shuffle 时会有一个分区器，默认是 hash partitioner</li><li>5、（可选）如果是读取 HDFS 中的数据，那么会有一个最优位置</li></ul><p>一个分区对应一个 Task（在同一个 Stage）, 一个分区对应的 Task 只能在一台机器里面（Executor），一台机器上可以有多个分区对应的 Task。</p><h2 id="2-RDD-常用算子"><a href="#2-RDD-常用算子" class="headerlink" title="2. RDD 常用算子"></a>2. RDD 常用算子</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># scala 转 <span class="type">RDD</span> 并行计算</span><br><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>)).map(_*<span class="number">2</span>).sortBy(x=&gt;x,<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd2.filter(_&gt;<span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>)).map(_*<span class="number">2</span>).sortBy(x=&gt;x+<span class="string">""</span>,<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>)).map(_*<span class="number">2</span>).sortBy(x=&gt;x.toString,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd4 = sc.parallelize(<span class="type">Array</span>(<span class="string">"a b c"</span>, <span class="string">"d e f"</span>, <span class="string">"h i j"</span>))</span><br><span class="line">rdd4.flatMap(_.split(' ')).collect</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd5 = sc.parallelize(<span class="type">List</span>(<span class="type">List</span>(<span class="string">"a b c"</span>, <span class="string">"a b b"</span>),<span class="type">List</span>(<span class="string">"e f g"</span>, <span class="string">"a f g"</span>), <span class="type">List</span>(<span class="string">"h i j"</span>, <span class="string">"a a b"</span>)))</span><br><span class="line">rdd5.flatMap(_.flatMap(_.split(<span class="string">" "</span>))).collect</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># union求并集，注意类型要一致</span><br><span class="line"><span class="keyword">val</span> rdd6 = sc.parallelize(<span class="type">List</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>))</span><br><span class="line"><span class="keyword">val</span> rdd7 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="keyword">val</span> rdd8 = rdd6.union(rdd7)</span><br><span class="line">rdd8.distinct.sortBy(x=&gt;x).collect</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># intersection求交集</span><br><span class="line"><span class="keyword">val</span> rdd9 = rdd6.intersection(rdd7)</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>((<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"jerry"</span>, <span class="number">2</span>), (<span class="string">"kitty"</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>((<span class="string">"jerry"</span>, <span class="number">9</span>), (<span class="string">"tom"</span>, <span class="number">8</span>), (<span class="string">"shuke"</span>, <span class="number">7</span>), (<span class="string">"tom"</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">#join(连接)</span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1.join(rdd2)</span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1.leftOuterJoin(rdd2)</span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1.rightOuterJoin(rdd2)</span><br><span class="line"></span><br><span class="line"># groupByKey（不会局部聚合）</span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1 union rdd2</span><br><span class="line">rdd3.groupByKey</span><br><span class="line"><span class="comment">//(tom,CompactBuffer(1, 8, 2))</span></span><br><span class="line">rdd3.groupByKey.map(x=&gt;(x._1,x._2.sum))</span><br><span class="line">groupByKey.mapValues(_.sum).collect</span><br><span class="line"><span class="type">Array</span>((tom,<span class="type">CompactBuffer</span>(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>)), (jerry,<span class="type">CompactBuffer</span>(<span class="number">9</span>, <span class="number">2</span>)), (shuke,<span class="type">CompactBuffer</span>(<span class="number">7</span>)), (kitty,<span class="type">CompactBuffer</span>(<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"># <span class="type">WordCount</span></span><br><span class="line">sc.textFile(<span class="string">"/root/words.txt"</span>).flatMap(x=&gt;x.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).sortBy(_._2,<span class="literal">false</span>).collect</span><br><span class="line">sc.textFile(<span class="string">"/root/words.txt"</span>).flatMap(x=&gt;x.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).groupByKey.map(t=&gt;(t._1, t._2.sum)).collect</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cogroup</span><br><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>((<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"tom"</span>, <span class="number">2</span>), (<span class="string">"jerry"</span>, <span class="number">3</span>), (<span class="string">"kitty"</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>((<span class="string">"jerry"</span>, <span class="number">2</span>), (<span class="string">"tom"</span>, <span class="number">1</span>), (<span class="string">"shuke"</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1.cogroup(rdd2)</span><br><span class="line"><span class="keyword">val</span> rdd4 = rdd3.map(t=&gt;(t._1, t._2._1.sum + t._2._2.sum))</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cartesian笛卡尔积</span><br><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>(<span class="string">"tom"</span>, <span class="string">"jerry"</span>))</span><br><span class="line"><span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">List</span>(<span class="string">"tom"</span>, <span class="string">"kitty"</span>, <span class="string">"shuke"</span>))</span><br><span class="line"><span class="keyword">val</span> rdd3 = rdd1.cartesian(rdd2)</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># spark action</span><br><span class="line"><span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"># collect</span><br><span class="line">rdd1.collect</span><br><span class="line"></span><br><span class="line"># reduce</span><br><span class="line"><span class="keyword">val</span> r = rdd1.reduce(_+_)</span><br><span class="line"></span><br><span class="line"># reduceByKey（局部聚合再全局聚合）</span><br><span class="line"></span><br><span class="line"># count</span><br><span class="line">rdd1.count</span><br><span class="line"></span><br><span class="line"># top</span><br><span class="line">rdd1.top(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"># take</span><br><span class="line">rdd1.take(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"># first(similer to take(<span class="number">1</span>))</span><br><span class="line">rdd1.first</span><br><span class="line"></span><br><span class="line"># takeOrdered</span><br><span class="line">rdd1.takeOrdered(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="3-高级算子"><a href="#3-高级算子" class="headerlink" title="3. 高级算子"></a>3. 高级算子</h2><p><strong>mapPartitionsWithIndex:</strong> 一次拿出一个分区（分区在并没有数据，而是记录要读取哪些数据，真正生成的 Task 才会读取多条数据），并且可以将分区的编号取出来</p><p><strong>功能：</strong>取分区中对应的数据时，还可以将分区的编号取出来，这样就可以知道数据是属于哪个分区的（哪个分区对应的Task的数据）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">val rdd = sc.parallelize(List(1,2,3,4,5,6,7,8,9), 2)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义函数(将对应分区中的数据取出来，并且带上分区编号)</span></span><br><span class="line">val func = (index: Int, it: Iterator[Int]) =&gt; &#123;</span><br><span class="line">it.map(e =&gt; s"part: $index, ele: $e")</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val rdd2 = rdd.mapPartitionsWithIndex(func)</span><br><span class="line">rdd2.collect</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果:</span></span><br><span class="line">res0: Array[String] = Array(part: 0, ele: 1, part: 0, ele: 2, part: 0, ele: 3, part: 0, ele: 4, part: 1, ele: 5, part: 1, ele: 6, part: 1, ele: 7, part: 1, ele: 8, part: 1, ele: 9)</span><br></pre></td></tr></table></figure><p><strong>aggregate:</strong> 聚合（局部聚合再全局聚合）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">val rdd = sc.parallelize(List(1,2,3,4,5,6,7,8,9), 2)</span><br><span class="line">val rdd2 = sc.parallelize(List("a","b","c","d","e","f"), 2)</span><br><span class="line">val rdd3 = sc.parallelize(List("12","23","345","4567"), 2)</span><br><span class="line">val rdd4 = sc.parallelize(List("12","23","345",""), 2)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1</span></span><br><span class="line">rdd.aggregate(0)(_+_, _+_)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2</span></span><br><span class="line">rdd.aggregate(0)(math.max(_,_), _+_)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3</span></span><br><span class="line">rdd2.aggregate("")(_+_, _+_)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4</span></span><br><span class="line">rdd3.aggregate("")((x, y) =&gt; math.max(x.length, y.length).toString, (x,y) =&gt; x+y)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5</span></span><br><span class="line">rdd4.aggregate("")((x,y) =&gt; math.min(x.length, y.length).toString, (x,y) =&gt; x+y)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果:</span></span><br><span class="line">1:res1: Int = 45</span><br><span class="line">2:res2: Int = 13</span><br><span class="line">3:res3: String = abcdeforres4: String = defabc</span><br><span class="line">4:res5: String = 24orres13: String = 42</span><br><span class="line">5:res14: String = 01orres16: String = 10</span><br></pre></td></tr></table></figure><p><strong>aggregateByKey:</strong> 分组聚合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val pairRDD = sc.parallelize(List( ("cat",2), ("cat", 5), ("mouse", 4),("cat", 12), ("dog", 12), ("mouse", 2)), 2)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1</span></span><br><span class="line">pairRDD.aggregateByKey(0)(_+_, _+_).collect</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果:</span></span><br><span class="line">1:res17: Array[(String, Int)] = Array((dog,12), (cat,19), (mouse,6))</span><br></pre></td></tr></table></figure><p><strong>collectAsMap:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val rdd = sc.parallelize(List(("a", 1), ("b", 2)))</span><br><span class="line"></span><br><span class="line">rdd.collectAsMap</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果:</span></span><br><span class="line">res19: scala.collection.Map[String,Int] = Map(b -&gt; 2, a -&gt; 1)</span><br></pre></td></tr></table></figure><p><strong>countByKey:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val rdd1 = sc.parallelize(List(("a", 1), ("b", 2), ("b", 2), ("c", 2), ("c", 1)))</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1</span></span><br><span class="line">rdd1.countByKey</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2</span></span><br><span class="line">rdd1.countByValue</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果：</span></span><br><span class="line">1：res0: scala.collection.Map[String,Long] = Map(a -&gt; 1, b -&gt; 2, c -&gt; 2)</span><br><span class="line">2：res1: scala.collection.Map[(String, Int),Long] = Map((a,1) -&gt; 1, (b,2) -&gt; 2, (c,2) -&gt; 1, (c,1) -&gt; 1)</span><br></pre></td></tr></table></figure><p><strong>filterByRange：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val rdd1 = sc.parallelize(List(("e", 5), ("c", 3), ("d", 4), ("c", 2), ("a", 1)))</span><br><span class="line"></span><br><span class="line">rdd1.filterByRange("b", "d").collect</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果：</span></span><br><span class="line">res2: Array[(String, Int)] = Array((c,3), (d,4), (c,2))</span><br></pre></td></tr></table></figure><p><strong>flatMapValues：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val rdd3 = sc.parallelize(List(("a", "1 2"), ("b", "3 4")))</span><br><span class="line"></span><br><span class="line">rdd3.flatMapValues(_.split(" ")).collect</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果：</span></span><br><span class="line">res5: Array[(String, String)] = Array((a,1), (a,2), (b,3), (b,4))</span><br></pre></td></tr></table></figure><p><strong>foldByKey:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val rdd1 = sc.parallelize(List("dog", "wolf", "cat", "bear"), 2)</span><br><span class="line"></span><br><span class="line">val rdd2 = rdd1.map(x =&gt; (x.length, x))</span><br><span class="line">val rdd3 = rdd2.foldByKey("")(_+_)</span><br><span class="line">rdd3.collect</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果：</span></span><br><span class="line">res8: Array[(Int, String)] = Array((4,bearwolf), (3,dogcat))</span><br></pre></td></tr></table></figure><p><strong>foreach</strong> 和 <strong>foreachPartition</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val rdd = sc.parallelize(List(1,2,3,4,5,6,7,8), 2)</span><br><span class="line"></span><br><span class="line">rdd.foreach(x =&gt; println(x*100))</span><br><span class="line">rdd.foreachPartition(it =&gt; it.foreach(x =&gt; println(x*10000)))</span><br></pre></td></tr></table></figure><p>总结：</p><table><thead><tr><th align="left">Transformation</th><th>Action</th></tr></thead><tbody><tr><td align="left">aggregateByKey</td><td>collect</td></tr><tr><td align="left">reduceByKey</td><td>aggregate</td></tr><tr><td align="left">filter</td><td>saveAsTextFile</td></tr><tr><td align="left">flatMap</td><td>foreach</td></tr><tr><td align="left">map</td><td>foreachPartition</td></tr><tr><td align="left">mapPartition</td><td></td></tr><tr><td align="left">mapPartitionWithIndex</td><td></td></tr></tbody></table><h2 id="4-WordCount-的执行流程"><a href="#4-WordCount-的执行流程" class="headerlink" title="4. WordCount 的执行流程"></a>4. WordCount 的执行流程</h2><p>6 个 RDD</p><p>2 个 Stage</p><p>2 类 Task</p><p>4 个 Task（2个分区）</p><h2 id="5-Cache"><a href="#5-Cache" class="headerlink" title="5. Cache"></a>5. Cache</h2><p>什么时候进行 cache:</p><ul><li>要求计算速度快</li><li>集群的资源足够大</li><li>重要：cache 的数据会多次的触发 Action</li><li>先进行过滤，然后将缩小范围的数据再 cache 到内存</li></ul><p>cache 实际调用的是 persist( ) 方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="type">NONE</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">DISK_ONLY</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">DISK_ONLY_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY_SER</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY_SER_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_SER</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_SER_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">OFF_HEAP</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="type">MEMORY_AND_DISK</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 第一个参数，放到磁盘</span></span><br><span class="line"><span class="comment">// 第二个参数，放到内存</span></span><br><span class="line"><span class="comment">// 第三个参数，使不使用 OFF_HEAP</span></span><br><span class="line"><span class="comment">// 第四个参数，内存中的数据，以java对象的方式保存</span></span><br><span class="line"></span><br><span class="line"><span class="type">OFF_HEAP</span>:堆外内存 （<span class="type">Tachyon</span>，分布式内存存储系统）</span><br><span class="line"><span class="type">Alluxio</span> - <span class="type">Open</span> <span class="type">Source</span> <span class="type">Memory</span> <span class="type">Speed</span> <span class="type">Virtual</span> <span class="type">Distributed</span> <span class="type">Storage</span></span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将数据缓存至内存</span></span><br><span class="line">val cached: RDD[((String, String), Int)] = reduced.cache()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用缓存的数据进行计算</span></span><br><span class="line">val filtered: RDD[((String, String), Int)] = cached.filter(_._1._1 == sb)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 释放缓存</span></span><br><span class="line">cached.unpersist(true)</span><br></pre></td></tr></table></figure><h2 id="6-CheckPoint"><a href="#6-CheckPoint" class="headerlink" title="6. CheckPoint"></a>6. CheckPoint</h2><p>什么时候做 checkpoint:</p><ul><li>迭代计算，要求保证数据安全</li><li>对速度要求不高（跟cache到内存进行对比）</li><li>将中间结果保存到hdfs</li></ul><p>设置checkpoint目录（分布式文件系统的目录hdfs目录）<br>经过复杂进行，得到中间结果<br>将中间结果checkpoint到指定的hdfs目录<br>后续的计算，就可以使用前面ck的数据了</p><p><strong>使用：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置还原点目录（分布式文件系统）</span></span><br><span class="line">sc.setCheckpointDir("hdfs://NameNode:9000/test")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 读数据</span></span><br><span class="line">val lines = sc.textFile("hdfs://NameNode/data")</span><br><span class="line">val filtered = lines.filter(_.contains("javaee"))</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 checkpoint 的数据，此时不会写数据，只会标记</span></span><br><span class="line">filtered.checkpoint</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时会 checkpoint 数据</span></span><br><span class="line">filter.count</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spark-RDD&quot;&gt;&lt;a href=&quot;#Spark-RDD&quot; class=&quot;headerlink&quot; title=&quot;Spark RDD&quot;&gt;&lt;/a&gt;Spark RDD&lt;/h1&gt;&lt;h2 id=&quot;1-简述&quot;&gt;&lt;a href=&quot;#1-简述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="记录" scheme="http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Spark" scheme="http://yoursite.com/tags/Spark/"/>
    
      <category term="RDD" scheme="http://yoursite.com/tags/RDD/"/>
    
  </entry>
  
  <entry>
    <title>SlideToShutDown 下滑关机任务栏设置</title>
    <link href="http://yoursite.com/2020/07/16/SlideToShutDown%E4%B8%8B%E6%BB%91%E5%85%B3%E6%9C%BA%E4%BB%BB%E5%8A%A1%E6%A0%8F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/07/16/SlideToShutDown%E4%B8%8B%E6%BB%91%E5%85%B3%E6%9C%BA%E4%BB%BB%E5%8A%A1%E6%A0%8F%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-07-16T11:55:42.000Z</published>
    <updated>2020-07-16T12:03:10.596Z</updated>
    
    <content type="html"><![CDATA[<p>使用 SlideToShutDown 可以实现下滑关机：</p><h4 id="1-找到-SlideToShutDown-exe-C-Windows-System32"><a href="#1-找到-SlideToShutDown-exe-C-Windows-System32" class="headerlink" title="1. 找到 SlideToShutDown.exe(C:\Windows\System32)"></a>1. 找到 SlideToShutDown.exe(C:\Windows\System32)</h4><h4 id="2-右键，固定到任务栏"><a href="#2-右键，固定到任务栏" class="headerlink" title="2. 右键，固定到任务栏"></a>2. 右键，固定到任务栏</h4><h4 id="3-右键任务栏图标-–-gt-右键-SlideToShutDown-–-gt-属性-–-gt-更改图标-–-gt-选择图标"><a href="#3-右键任务栏图标-–-gt-右键-SlideToShutDown-–-gt-属性-–-gt-更改图标-–-gt-选择图标" class="headerlink" title="3. 右键任务栏图标 –&gt; 右键 SlideToShutDown –&gt; 属性 –&gt; 更改图标 –&gt; 选择图标"></a>3. 右键任务栏图标 –&gt; 右键 SlideToShutDown –&gt; 属性 –&gt; 更改图标 –&gt; 选择图标</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 SlideToShutDown 可以实现下滑关机：&lt;/p&gt;
&lt;h4 id=&quot;1-找到-SlideToShutDown-exe-C-Windows-System32&quot;&gt;&lt;a href=&quot;#1-找到-SlideToShutDown-exe-C-Windows-System
      
    
    </summary>
    
    
      <category term="记录" scheme="http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="SlideToShutDown" scheme="http://yoursite.com/tags/SlideToShutDown/"/>
    
  </entry>
  
  <entry>
    <title>常见博客框架</title>
    <link href="http://yoursite.com/2020/07/14/%E5%B8%B8%E8%A7%81%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2020/07/14/%E5%B8%B8%E8%A7%81%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/</id>
    <published>2020-07-14T11:57:02.000Z</published>
    <updated>2020-07-14T12:32:09.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、动态博客"><a href="#一、动态博客" class="headerlink" title="一、动态博客"></a>一、动态博客</h2><h3 id="1、自建"><a href="#1、自建" class="headerlink" title="1、自建"></a>1、自建</h3><p>前端（Thymeleaf…），后端（SpringBoot、MySQL……），登录注册</p><p>优点：更加灵活，易于管理</p><p>缺点：需要懂前前后端开发技术，且需要个人服务器</p><h3 id="2、wordpress"><a href="#2、wordpress" class="headerlink" title="2、wordpress"></a>2、wordpress</h3><p>网址：<a href="https://wordpress.org" target="_blank" rel="noopener">worepress</a></p><p>优点：开源，方便</p><h2 id="二、静态博客"><a href="#二、静态博客" class="headerlink" title="二、静态博客"></a>二、静态博客</h2><h3 id="1、hexo"><a href="#1、hexo" class="headerlink" title="1、hexo"></a>1、hexo</h3><p>网址：<a href="https://hexo.io" target="_blank" rel="noopener">hexo</a></p><p>优点，快速，简洁，高效，一键部署，可以部署到 GitHub、Gitte 等</p><p>搭建教程: <a href="https://kdocke.github.io/2020/06/19/使用Hexo搭建个人博客" target="_blank" rel="noopener">使用 Hexo 搭建个人博客</a></p><h3 id="2、jekyllrb"><a href="#2、jekyllrb" class="headerlink" title="2、jekyllrb"></a>2、jekyllrb</h3><p>网址：<a href="https://jekyllrb.com" target="_blank" rel="noopener">jekyllrb</a></p><p>优点：，类似于hexo</p><h3 id="3、hugo"><a href="#3、hugo" class="headerlink" title="3、hugo"></a>3、hugo</h3><p>网址：<a href="https://www.gohugo.org" target="_blank" rel="noopener">hugo</a></p><p>优点：go语言实现，安装简单，皮肤酷炫</p><h3 id="4、vuepress"><a href="#4、vuepress" class="headerlink" title="4、vuepress"></a>4、vuepress</h3><p>网址：<a href="https://vuepress.vuejs.org" target="_blank" rel="noopener">vuepress</a></p><p>优点：新出，快速</p><h3 id="5、solo"><a href="#5、solo" class="headerlink" title="5、solo"></a>5、solo</h3><p>网址：<a href="https://solo.b3log.org" target="_blank" rel="noopener">solo</a></p><p>jdk支持</p><p>优点：新出</p><h2 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h2><blockquote><p><a href="https://youtu.be/erKYtw4Rfhk" target="_blank" rel="noopener">CodeSheep程序羊 Youtube 视频教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、动态博客&quot;&gt;&lt;a href=&quot;#一、动态博客&quot; class=&quot;headerlink&quot; title=&quot;一、动态博客&quot;&gt;&lt;/a&gt;一、动态博客&lt;/h2&gt;&lt;h3 id=&quot;1、自建&quot;&gt;&lt;a href=&quot;#1、自建&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
    
      <category term="记录" scheme="http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="博客框架" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>院中小鸟</title>
    <link href="http://yoursite.com/2020/07/13/%E9%99%A2%E4%B8%AD%E5%B0%8F%E9%B8%9F/"/>
    <id>http://yoursite.com/2020/07/13/%E9%99%A2%E4%B8%AD%E5%B0%8F%E9%B8%9F/</id>
    <published>2020-07-13T11:40:41.000Z</published>
    <updated>2020-07-13T12:03:30.840Z</updated>
    
    <content type="html"><![CDATA[<p> 某日，于院中杏树上偶现一巢，不觉惊喜万分，其巢隐于伸展在屋檐下的枝杈间，上圆下窄，高不过十数厘米，外形不甚精美，内却有蛋三枚，挨挤在枯草铺就的小巢内，安静祥和。</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Essay/%E9%99%A2%E4%B8%AD%E5%B0%8F%E9%B8%9F/three-bird-eggs.jpg" alt="三只鸟蛋"></p><p> 鸟妈妈有时白天并不在巢穴内，我便得以在闲暇之时近距离接触这未知的生命。但到得晚上，鸟妈妈却总是陪伴在孩子的身边，其时正值盛夏，夜晚的空气也更加的温热，鸟妈妈卧于层层杏叶间的巢内，期待着孩子的出世。她非常敏感，初时只要在树边经过，她都会扑棱棱飞走；之后或是慢慢相熟，她才不至我一靠近便惊走，甚至会与我对视一番。她在睡觉时往往会将头藏在翅膀里，待我靠近后便立刻警觉过来，睁开圆圆亮亮的黑眼睛望向我。</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Essay/%E9%99%A2%E4%B8%AD%E5%B0%8F%E9%B8%9F/bird-family-front-2.jpg" alt="夜晚的鸟妈妈"></p><p>  过得数日，便又增加了一枚小家伙， 看着它们斑斓的色彩与倚靠在一起的样子，内心多了一丝分外的期待，期待它们破壳而出的时刻，期待它们飞翔于空的姿态…</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Essay/%E9%99%A2%E4%B8%AD%E5%B0%8F%E9%B8%9F/four-bird-eggs.jpg" alt="四只鸟蛋"></p><p>   就在这每日的盼望中，日子一天天过去，我原以为巢内的生命会在我的期待中一点点长大，一点点羽翼渐丰，一点点飞向天空，迎来新的人生。然则…</p><p>  某日，天有不测，飞来横祸，一长尾恶禽盯上了巢穴内懵然无知的生命，其盘踞在巢穴上方，一口口吞下这一颗颗沉睡的生命。待吾发现之时已为时晚矣，巢内空空如也，其亦早已心满意足的展翅离开，我心中顿时悔恨万分，深感没有担负好自身的责任。</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Essay/%E9%99%A2%E4%B8%AD%E5%B0%8F%E9%B8%9F/along-bird-family.jpg" alt="失落的巢穴"></p><p>  我无法可想当时鸟妈妈的心情，或许她彼时正在觅食，不知道家中已遭强盗的洗劫；或许她就在不远处看着恶贼的侵略，但却无可奈何，她幼小的身体显然不足以抵抗。</p><p>  我在树边等待良久，期待鸟妈妈的飞来，期待她能重新振作，也期待她能重建家园，然而没有，她永远的离开了，再不曾归来。</p><p>  想必于其而言失去幼子的孤巢亦是一片伤心地，既家不为家，又何必再回。</p><p>  惟余这失落的巢穴，与空中无依的灵魂。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 某日，于院中杏树上偶现一巢，不觉惊喜万分，其巢隐于伸展在屋檐下的枝杈间，上圆下窄，高不过十数厘米，外形不甚精美，内却有蛋三枚，挨挤在枯草铺就的小巢内，安静祥和。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Kdoc
      
    
    </summary>
    
    
      <category term="散文" scheme="http://yoursite.com/categories/%E6%95%A3%E6%96%87/"/>
    
    
      <category term="小鸟" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%B8%9F/"/>
    
      <category term="有感" scheme="http://yoursite.com/tags/%E6%9C%89%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Snippet 博客主题配置</title>
    <link href="http://yoursite.com/2020/06/22/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/06/22/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</id>
    <published>2020-06-22T07:30:30.000Z</published>
    <updated>2020-07-15T10:25:07.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载主题"><a href="#一、下载主题" class="headerlink" title="一、下载主题"></a>一、下载主题</h2><p>Git 方式：进入 Hexo 博客所在主目录，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;shenliyang&#x2F;hexo-theme-snippet.git themes&#x2F;hexo-theme-snippet</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/git-download-hexo-theme-snippet.png" alt="git-download-hexo-theme-snippet"></p><h2 id="二、安装主题插件"><a href="#二、安装主题插件" class="headerlink" title="二、安装主题插件"></a>二、安装主题插件</h2><p>因为 <strong>hexo-theme-snippet</strong> 使用了 <code>ejs</code> 模版引擎 、 <code>Less</code> CSS预编译语言以及在官方插件的基础上 进行功能的开发，以下为必装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S</span><br><span class="line">或</span><br><span class="line">cnpm install --save hexo-renderer-ejs hexo-renderer-less hexo-deployer-git</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/install-theme-plugin.png" alt="install-theme-plugin"></p><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>1.修改 hexo-theme-snippet 为 snippet，然后更改站点配置文件的theme配置为snippet</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/update-theme-conf-file-to-snippet.png" alt="update-theme-conf-file-to-snippet"></p><p>2.然后执行下述命令，再访问浏览器，即可看到主题已经更换成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">#清空生成的静态文件</span></span><br><span class="line">hexo g <span class="comment">#生成新的静态文件</span></span><br><span class="line">hexo s <span class="comment">#开启本地访问</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/local-test-snippet.png" alt="local-test-snippet"></p><p>3.将博客推到 github, <code>hexo d</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/deploy-test-snippet.png" alt="deploy-test-snippet"></p><h2 id="四、菜单配置"><a href="#四、菜单配置" class="headerlink" title="四、菜单配置"></a>四、菜单配置</h2><h3 id="1-修改页面菜单（分类）名称"><a href="#1-修改页面菜单（分类）名称" class="headerlink" title="1.修改页面菜单（分类）名称"></a>1.修改页面菜单（分类）名称</h3><p>修改博客主题目录下 <code>_config.yml</code> 文件中的 <code>menu</code> 项为以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">## menu</span><br><span class="line">menu:</span><br><span class="line">- page: 主页</span><br><span class="line">  url: &#x2F;</span><br><span class="line">  icon:</span><br><span class="line">- page: 教程</span><br><span class="line">  url: &#x2F;categories&#x2F;教程&#x2F;</span><br><span class="line">  icon:</span><br><span class="line">- page: 记录</span><br><span class="line">  url: &#x2F;categories&#x2F;记录&#x2F;</span><br><span class="line">  icon:</span><br><span class="line">- page: 散文</span><br><span class="line">  url: &#x2F;categories&#x2F;散文&#x2F;</span><br><span class="line">  icon:</span><br><span class="line">- page: 时间轴</span><br><span class="line">  url: &#x2F;archives&#x2F;</span><br><span class="line">  icon:</span><br></pre></td></tr></table></figure><p>若要添加新的菜单（分类），只需按照上述格式添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- page: 分享</span><br><span class="line">  url: &#x2F;categories&#x2F;分享&#x2F;</span><br><span class="line">  icon:</span><br></pre></td></tr></table></figure><h3 id="2-修改新建文章模板"><a href="#2-修改新建文章模板" class="headerlink" title="2.修改新建文章模板"></a>2.修改新建文章模板</h3><p>修改博客目录下 <code>scaffolds</code> 中的 <code>post.md</code> 内容为以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">comments: false</span><br><span class="line">img:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="3-新建文章"><a href="#3-新建文章" class="headerlink" title="3.新建文章"></a>3.新建文章</h3><p>为教程分类下新建一篇 <code>Node.js 安装教程</code> 的测试文章 hexo n “<code>Node.js 安装教程</code>“</p><p>编辑文章内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Node.js 的安装教程&#x2F;&#x2F; 文章标题</span><br><span class="line">comments: true   &#x2F;&#x2F; 是否开启评论</span><br><span class="line">date: 2020-06-22 11:45:29  &#x2F;&#x2F; 文章日期</span><br><span class="line">categories: &#39;教程&#39;  &#x2F;&#x2F; 文章分类</span><br><span class="line">tags: [&#39;Node.js&#39;, &#39;npm&#39;]   &#x2F;&#x2F; 文章标签</span><br><span class="line">img: https:&#x2F;&#x2F;nodejs.org&#x2F;static&#x2F;images&#x2F;logos&#x2F;nodejs-new-pantone-white.svg  &#x2F;&#x2F; 封面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 下载</span><br><span class="line"></span><br><span class="line">官网下载 | 镜像下载</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 安装</span><br><span class="line"></span><br><span class="line">双击下一步安装</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 测试</span><br><span class="line"></span><br><span class="line">cmd</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 参考</span><br><span class="line"></span><br><span class="line">[官网]()</span><br></pre></td></tr></table></figure><p>重新启动后，访问 教程 页面可以看到新建的文章</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/menu-conf.png" alt="menu-conf"></p><h2 id="五、网站配置"><a href="#五、网站配置" class="headerlink" title="五、网站配置"></a>五、网站配置</h2><p><strong>修改博客图标：</strong>在 snippet 主题下，修改 souce 目录下的 favicon.ico 图标为自己的图标。</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/ico-conf.png" alt="ico-conf"></p><p><strong>修改博客标题及博客语言：</strong>修改博客配置文件 <code>_config.yml</code> 中的 Site 为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Kdocke</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;&#39;</span><br><span class="line">keywords:</span><br><span class="line">author: Kdocke</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#39;&#39;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/update-site-title.png" alt="update-site-title"></p><p><strong>修改博客头像：</strong> 修改博客主题下 <code>snippet\source\img\avatar.jpg</code> 头像为自己的头像。</p><p><strong>修改网站宣传语：</strong> 修改博客主题下的 _config.yml 配置文件中的 branding 项为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 网站宣传语</span><br><span class="line">branding: 生命在于折腾</span><br></pre></td></tr></table></figure><p><strong>修改博客 head-img 图片：</strong>修改博客主题下 <code>snippet\source\img\hea-img.jpg</code> 图片为自己的图片，并将其链接指向自己的博客，修改 博客主题 下的配置文件 _config.yml 的 Carousel 项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## Carousel</span><br><span class="line">carousel:</span><br><span class="line">  img: &#39;.&#x2F;img&#x2F;head-img.jpg&#39;</span><br><span class="line">  url: &#39;https:&#x2F;&#x2F;kdocke.github.io&#x2F;&#39;</span><br></pre></td></tr></table></figure><h2 id="六、创建-about-页面"><a href="#六、创建-about-页面" class="headerlink" title="六、创建 about 页面"></a>六、创建 about 页面</h2><p>在 Hexo 博客所在主目录，执行 <code>hexo new page about</code> :</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Snippet%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/create-about-page.png" alt="create-about-page"></p><p>此时会在 souce 文件夹下创建 about 文件夹，并且里面已经新建好了 index.md 文件。</p><p>新增 关于 的菜单选项，修改博客主题目录下 <code>_config.yml</code> 文件中的 <code>menu</code> 项，增加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- page: 关于</span><br><span class="line">  url: &#x2F;about&#x2F;</span><br><span class="line">  icon:</span><br></pre></td></tr></table></figure><p>修改 index.md：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于博主</span><br><span class="line">date: 2020-07-13 11:15:50关于我</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 关于我</span><br><span class="line">生命在于折腾</span><br><span class="line"></span><br><span class="line">## 联系我</span><br><span class="line">博主 Github 地址：https:&#x2F;&#x2F;github.com&#x2F;Kdocke</span><br><span class="line">联系邮箱：kdocked@163.com</span><br></pre></td></tr></table></figure><p>重启 hexo 即可。</p><h2 id="七、搜索配置"><a href="#七、搜索配置" class="headerlink" title="七、搜索配置"></a>七、搜索配置</h2><p>如果要使用本地站点搜索，必须安装插件hexo-generator-json-content来创建本地搜索json文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-json-content@2.2.0 -S</span><br><span class="line">或</span><br><span class="line">cnpm install --save hexo-generator-json-content@2.2.0</span><br></pre></td></tr></table></figure><p>然后修改主题配置_config.yml文件下<code>jsonContent</code>相关参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 搜索</span><br><span class="line">jsonContent:</span><br><span class="line">  searchLocal: true &#x2F;&#x2F; 是否启用本地搜索</span><br><span class="line">  searchGoogle: false &#x2F;&#x2F;是否启用谷歌搜索</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    text: true</span><br><span class="line">    content: true</span><br><span class="line">    categories: false</span><br><span class="line">    tags: false</span><br></pre></td></tr></table></figure><h2 id="八、评论配置"><a href="#八、评论配置" class="headerlink" title="八、评论配置"></a>八、评论配置</h2><p> 使用 <a href="https://valine.js.org/" target="_blank" rel="noopener">Valine—— 一款极简的无后端评论系统</a> 作为评论系统。</p><p><strong>1.获取 <code>APP ID</code> 和 <code>APP KEY</code></strong></p><ul><li>点击<a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">登录</a>或<a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">注册</a><code>Leancloud</code>，注册需要实名;</li><li>创建应用</li><li>获取 APP ID 和 APP KEY: 刚刚创建的应用 &gt; 设置 &gt; 应用 KEY</li></ul><p><strong>2.编辑博客主题的配置文件 _config.yml 的 Valine评论项</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## Valine评论</span><br><span class="line">valine:</span><br><span class="line">   enable: true</span><br><span class="line">   appId: 自己的APP ID</span><br><span class="line">   appKey: 自己的APP KEY</span><br><span class="line">   placeholder: 说点什么吧</span><br><span class="line">   notify: false</span><br><span class="line">   verify: false</span><br><span class="line">   avatar: wavatar</span><br><span class="line">   meta: nick,mail</span><br><span class="line">   pageSize: 10</span><br></pre></td></tr></table></figure><p>配置中 avatar（头像） 默认为 mm，可以更改，有以下选项：</p><table><thead><tr><th align="left">参数</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">空字符串 ‘’</td><td align="left">Gravatar 官方图形</td></tr><tr><td align="left">mm</td><td align="left">神秘人 (一个灰白头像)</td></tr><tr><td align="left">identicon</td><td align="left">抽象几何图形 (根据邮箱或昵称生成)</td></tr><tr><td align="left">monsterid</td><td align="left">小怪物</td></tr><tr><td align="left">wavatar</td><td align="left">用不同面孔和背景组合生成的头像 (根据邮箱或昵称生成)</td></tr><tr><td align="left">retro</td><td align="left">八位像素复古头像 (根据邮箱或昵称生成)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、下载主题&quot;&gt;&lt;a href=&quot;#一、下载主题&quot; class=&quot;headerlink&quot; title=&quot;一、下载主题&quot;&gt;&lt;/a&gt;一、下载主题&lt;/h2&gt;&lt;p&gt;Git 方式：进入 Hexo 博客所在主目录，执行：&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Snippet" scheme="http://yoursite.com/tags/Snippet/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo 搭建个人博客</title>
    <link href="http://yoursite.com/2020/06/19/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/06/19/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-06-19T08:29:29.000Z</published>
    <updated>2020-07-14T12:32:06.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装-Git"><a href="#一、安装-Git" class="headerlink" title="一、安装 Git"></a>一、安装 Git</h2><p>参考：<a href="https://kdocke.github.io/2020/06/19/Git的安装教程" target="_blank" rel="noopener">Git 安装教程</a></p><h2 id="二、安装-Node-js"><a href="#二、安装-Node-js" class="headerlink" title="二、安装 Node.js"></a>二、安装 Node.js</h2><p>参考: <a href="https://kdocke.github.io/2020/06/19/Node-js的安装教程" target="_blank" rel="noopener">Node.js 安装教程</a></p><h2 id="三、安装-hexo"><a href="#三、安装-hexo" class="headerlink" title="三、安装 hexo"></a>三、安装 hexo</h2><p>使用 cnpm 安装 hexo-cli</p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/install_hexo-cli-1.png" alt="install_hexo-cli-1"/><p>验证 hexo 安装结果</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/install_hexo-cli-2.png" alt="image-20200619153246580"></p><h2 id="四、本地简单使用"><a href="#四、本地简单使用" class="headerlink" title="四、本地简单使用"></a>四、本地简单使用</h2><p><strong>1.</strong> 建立 <code>FirstBlog</code> 文件夹，并进入</p><p><strong>2.</strong> 在 <code>FirstBlog</code> 文件夹中初始化博客</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-init.png" alt="hexo-init"></p><p><strong>3.</strong> 安装后的文件</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/inited-file.png" alt="inited-file"></p><p><strong>4.</strong> 启动博客 <code>hexo s</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/start-blog-1.png" alt="start-blog-1"></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/start-blog-2.png" alt="start-blog-2"></p><p><strong>5.</strong> 创建博文 <code>hexo n</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/create-first-blog.png" alt="create-first-blog"></p><p><strong>6.</strong> 编辑并保存第一篇博文</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/edit-first-blog.png" alt="edit-first-blog"></p><p><strong>7.</strong> 清理 <code>hexo clean</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo-clean.png" alt="hexo-clean"></p><p><strong>8.</strong> 重新生成 <code>hexo g</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/regenerate-blog.png" alt="regenerate-blog"></p><p><strong>9.</strong> 重新启动博客 <code>hexo s</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/my-first-blog.png" alt="my-first-blog"></p><h2 id="五、将博客部署到-GitHub"><a href="#五、将博客部署到-GitHub" class="headerlink" title="五、将博客部署到 GitHub"></a>五、将博客部署到 GitHub</h2><p><strong>1.</strong> 进入个人 GitHub，创建一个新仓库，注意仓库名的命名规则，需要自己的账号名 + github.io，后面需要用此仓库名来访问部署好的博客</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/create-blog-repository.png" alt="create-blog-repository"></p><p><strong>2.</strong> 安装 git 部署插件 <code>cnpm install --save hexo-deployer-git</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/install-hexo-deployer-git.png" alt="install-hexo-deployer-git"></p><p><strong>3.</strong> 修改 Blog 目录下的 _config.yml 文件，将文件末尾的 deploy 项修改为以下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/Kdocke/Kdocke.github.io.git</span> <span class="comment"># 刚刚新建的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><strong>4.</strong> 开始部署 <code>hexo d</code>，中途会要求输入 github 的账号和密码，正常输入就可以</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/deploy-github-finish-1.png" alt="deploy-github-finish-1"></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/deploy-github-finish-2.png" alt="deploy-github-finish-2"></p><p><strong>5.</strong> 使用之前的仓库名访问部署好的博客网站</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/success-access.png" alt="success-access"></p><h2 id="六、更换主题"><a href="#六、更换主题" class="headerlink" title="六、更换主题"></a>六、更换主题</h2><p>主题地址：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a></p><p><strong>1.</strong> 安装 yilia 主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/clone-yilia-theme.png" alt="clone-yilia-theme"></p><p><strong>2.</strong> 修改 Blog 目录下的 _config.yml 文件，更改 theme 部分为以下内容:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">yilia</span></span><br></pre></td></tr></table></figure><p><strong>3.</strong> 重新清理生成，<code>hexo clean</code> and <code>hexo g</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/re-clean-generate.png" alt="re-clean-generate"></p><p><strong>4.</strong> 本地启动查看 <code>hexo s</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/yilia-local-start.png" alt="yilia-local-start"></p><p><strong>5.</strong> 将博客推到 github，<code>hexo d</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/deploy-yilia-to-github.png" alt="deploy-yilia-to-github"></p><p><strong>6.</strong> 访问</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/access-yilia-blog.png" alt="access-yilia-blog"></p><h2 id="七、参考"><a href="#七、参考" class="headerlink" title="七、参考"></a>七、参考</h2><blockquote><p> <a href="https://youtu.be/erKYtw4Rfhk" target="_blank" rel="noopener">CodeSheep程序羊 Youtube 视频教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、安装-Git&quot;&gt;&lt;a href=&quot;#一、安装-Git&quot; class=&quot;headerlink&quot; title=&quot;一、安装 Git&quot;&gt;&lt;/a&gt;一、安装 Git&lt;/h2&gt;&lt;p&gt;参考：&lt;a href=&quot;https://kdocke.github.io/2020/06/1
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 的安装教程</title>
    <link href="http://yoursite.com/2020/06/19/Node-js%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/06/19/Node-js%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2020-06-19T07:30:30.000Z</published>
    <updated>2020-07-14T11:41:00.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><p>官网下载：<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a></p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/nodejs-index.png" alt="Node.js首页"  /><p>一般选择下载左侧的长期支持版本</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p><strong>1.</strong> 双击安装包</p><p><strong>2.</strong> Next</p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-1.png" alt="install-1"  /><p><strong>3.</strong> 同意协议</p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-2.png" alt="install-2"  /><p><strong>4.</strong> 选择安装位置，建议安装在 D 盘</p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-3.png" alt="install-3"  /><p><strong>5.</strong> 这里运行环境、npm 包管理器、在线文档快捷方式、添加到环境变量四项全部安装</p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-4.png" alt="install-4"  /><p><strong>6.</strong> 不用勾选，直接 Next</p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-5.png" alt="install-5"  /><p><strong>7.</strong> install</p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-6.png" alt="install-6"  /><p><strong>8.</strong> 等待安装完成，安装完成后会有两个组件</p><ul><li>Node.js 本身</li><li>npm 包管理器</li></ul><h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><p>打开 cmd，分别输入 <code>node --version</code> 和 <code>npm --version</code>, 如果正确输出版本号，证明安装成功</p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/res.png" alt="res"  /><h2 id="四、设置依赖包安装路径"><a href="#四、设置依赖包安装路径" class="headerlink" title="四、设置依赖包安装路径"></a>四、设置依赖包安装路径</h2><p><strong>1.</strong> 在 <code>nodejs</code> 安装目录下创建 <code>node_global</code> 以及 <code>node_cache</code> 文件夹</p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/rely-1.png" alt="rely-1"></p><p><strong>2.</strong> 在 <code>nodejs\node_modules\npm</code> 设置 npmrc文件，使用文本文档打开修改里面的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prefix&#x3D;D:\bProgramSoftware\nodejs\node_global</span><br><span class="line">cache&#x3D;D:\bProgramSoftware\nodejs\node_cache</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/rely-2.png" alt="rely-2"></p><p><strong>3.</strong> 设置环境变量，在 “系统变量” 中新建</p><p>变量名为 <code>NODE_PATH</code>，</p><p>变量值为  <code>D:\bProgramSoftware\nodejs</code>（变量值是自己 node 安装的根目录）</p><p>之后在 “系统变量” 的 path 中新建两个变量 <code>%NODE_PATH%\node_modules</code> 和 <code>%NODE_PATH%\node_global</code><br><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Node.js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/rely-3.png" alt="rely-3"  /></p><h2 id="五、安装淘宝镜像"><a href="#五、安装淘宝镜像" class="headerlink" title="五、安装淘宝镜像"></a>五、安装淘宝镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、下载&quot;&gt;&lt;a href=&quot;#一、下载&quot; class=&quot;headerlink&quot; title=&quot;一、下载&quot;&gt;&lt;/a&gt;一、下载&lt;/h2&gt;&lt;p&gt;官网下载：&lt;a href=&quot;https://nodejs.org/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="安装" scheme="http://yoursite.com/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Git 的安装教程</title>
    <link href="http://yoursite.com/2020/06/19/Git%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/06/19/Git%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2020-06-19T06:52:52.000Z</published>
    <updated>2020-07-14T11:33:44.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><p>网址：<a href="https://git-scm.com/" target="_blank" rel="noopener">git 官网</a> 或 <a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">淘宝镜像</a></p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p><strong>1.</strong> 双击安装程序，点击 Next</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-1.png" alt="install-1" style="zoom:80%;" /></div><p><strong>2.</strong> 更改安装路径，建议 D 盘，点击 Next</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-2.png" alt="install-2" style="zoom:80%;" /></div><p><strong>3.</strong> 选择安装组件，可以直接 Next</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-3.png" alt="install-3" style="zoom:80%;" /></div><p><strong>4.</strong> 直接 Next，创建开始菜单</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-4.png" alt="install-4" style="zoom:80%;" /></div><p><strong>5.</strong> 选择编辑方式，默认使用 Vim，点击 Next</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-5.png" alt="install-5" style="zoom:80%;" /></div><p><strong>6.</strong> 使用方式，三种，默认选择第二种</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-6.png" alt="install-6" style="zoom:80%;" /></div><p><strong>7.</strong> 选择 OpenSSL 远程连接方式，Next</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-7.png" alt="install-7" style="zoom:80%;" /></div><p><strong>8.</strong> 配置换行格式，默认，Next</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-8.png" alt="install-8" style="zoom:80%;" /></div><p><strong>9.</strong> 配置终端，默认，Next</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-9.png" alt="install-9" style="zoom:80%;" /></div><p><strong>10.</strong> 默认，Next</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-10.png" alt="install-10" style="zoom:80%;" /></div><p><strong>11.</strong> 默认配置，Next</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-11.png" alt="install-11" style="zoom:80%;" /></div><p><strong>12.</strong> 安装</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-12.png" alt="install-12" style="zoom:80%;" /></div><p><strong>13.</strong> 安装完成</p><div align="center"><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/install-13.png" alt="install-13" style="zoom:80%;" /></div><h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><p>命令行输入 <code>git --version</code></p><p><img src="https://raw.githubusercontent.com/Kdocke/MyDocumentImg/master/MyKnowledgeBase/Tutorial/Git%20%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/test-1.png" alt="test-1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、下载&quot;&gt;&lt;a href=&quot;#一、下载&quot; class=&quot;headerlink&quot; title=&quot;一、下载&quot;&gt;&lt;/a&gt;一、下载&lt;/h2&gt;&lt;p&gt;网址：&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="安装" scheme="http://yoursite.com/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
